
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)
    ListedNToken ZRX cZRX
    ListedNToken DAI cDAI
    -- Upgrade to G2
    NiutrollerImpl Deploy StandardG2 StandardNiutrollerG2
    Unitroller SetPendingImpl StandardNiutrollerG2
    NiutrollerImpl StandardNiutrollerG2 BecomeG2
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address StandardNiutrollerG2)
    -- Upgrade to G3
    NiutrollerImpl Deploy ScenarioG3 ScenNiutrollerG3
    Unitroller SetPendingImpl ScenNiutrollerG3
    NiutrollerImpl ScenNiutrollerG3 BecomeG3 1e18 [cZRX cDAI]
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG3)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)
    ListedNToken ZRX cZRX
    ListedNToken DAI cDAI
    -- Upgrade to G2
    NiutrollerImpl Deploy StandardG2 NiutrollerG2
    Unitroller SetPendingImpl NiutrollerG2
    NiutrollerImpl NiutrollerG2 BecomeG2
    Niutroller SetPauseGuardian Coburn
    Assert Equal (Niutroller PauseGuardian) (Address Coburn)
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address NiutrollerG2)
    -- Upgrade to G3
    NiutrollerImpl Deploy ScenarioG3 ScenNiutrollerG3
    Unitroller SetPendingImpl ScenNiutrollerG3
    NiutrollerImpl ScenNiutrollerG3 BecomeG3 1e18 [cZRX cDAI]
    Assert Equal (Niutroller PauseGuardian) (Address Coburn)
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG3)
    -- Downgrade to G2
    Unitroller SetPendingImpl NiutrollerG2
    NiutrollerImpl NiutrollerG2 BecomeG2
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address NiutrollerG2)
    -- Upgrade to G3 again
    Unitroller SetPendingImpl ScenNiutrollerG3
    NiutrollerImpl ScenNiutrollerG3 BecomeG3 1e18 []
    Assert Equal (Niutroller GetNiuMarkets) [(Address cZRX) (Address cDAI)]
    Assert Equal (Niutroller PauseGuardian) (Address Coburn)
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG3)

Test "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1_2
    Unitroller SetPendingImpl ScenNiutrollerG1_2
    NiutrollerImpl ScenNiutrollerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (Niutroller CloseFactor) 0.4
    Assert Equal (Niutroller MaxAssets) 40
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1_2)

--G1 recome
Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 Recome
    Assert Equal (Niutroller CloseFactor) 0.0
    Assert Equal (Niutroller MaxAssets) 0
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)

--G1 bork
Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)
    -- Now move to a borked one that's bad
    NiutrollerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    NiutrollerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (Niutroller CloseFactor) "revert"
    Assert Equal (Niutroller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScenNiutrollerG1
    NiutrollerImpl ScenNiutrollerG1 Recome
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (Niutroller Implementation) (Address ScenNiutrollerG1)

Macro CheckUnitrollerStorage implementation
    -- Admin; 0
    Assert Equal (Niutroller Admin) (Address Root)
    Assert Equal (StorageAt Niutroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (Niutroller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt Niutroller 1 0 "address") (Address Coburn)
    -- NiutrollerImplementation; 2
    Assert Equal (Unitroller Implementation) implementation
    Assert Equal (StorageAt Niutroller 2 0 "address") implementation
    -- PendingNiutrollerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt Niutroller 3 0 "number") 0

Macro CheckV1Storage
    -- Oracle; 4
    Assert Equal (Niutroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Niutroller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (Niutroller CloseFactor) 0.2
    Assert Equal (StorageAt Niutroller 5 0 "number") 0.2e18
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Niutroller LiquidationIncentive) 1
    Assert Equal (StorageAt Niutroller 6 0 "number") 1e18
    -- MaxAssets; 7
    Assert Equal (Niutroller MaxAssets) 20
    Assert Equal (StorageAt Niutroller 7 0 "number") 20
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Niutroller 8 0 "number") 0
    Assert Equal (StorageAtMapping Niutroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Niutroller 8 (Address Geoff) "list(address)") [(Address cZRX) (Address cBAT)]
    Assert Equal (Niutroller AssetsIn Geoff) [(Address cZRX) (Address cBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt Niutroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Niutroller 9 (Address cZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Niutroller 9 (Address cBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Niutroller 9 (Address cBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Niutroller CollateralFactor cZRX) 0.5
    Assert Equal (Niutroller CollateralFactor cBAT) 0.4
    Assert Equal (Niutroller CheckMembership Geoff cZRX) True
    Assert Equal (Niutroller CheckMembership Geoff cBAT) True

Macro CheckV2Storage
    -- PauseGuardian; 10
    Assert Equal (Niutroller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt Niutroller 10 0 "address") (Address Coburn)
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt Niutroller 10 40 "bool") False
    Assert Equal (Niutroller _MintGuardianPaused) False
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt Niutroller 10 42 "bool") False
    Assert Equal (Niutroller _BorrowGuardianPaused) False
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt Niutroller 10 44 "bool") False
    From Coburn (Niutroller SetGuardianPaused "Transfer" True)
    Assert Equal (Niutroller TransferGuardianPaused) True
    Assert Equal (StorageAt Niutroller 10 44 "bool") True
    Niutroller SetGuardianPaused "Transfer" False
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt Niutroller 10 46 "bool") False
    From Coburn (Niutroller SetGuardianPaused "Seize" True)
    Assert Equal (Niutroller SeizeGuardianPaused) True
    Assert Equal (StorageAt Niutroller 10 46 "bool") True
    Niutroller SetGuardianPaused "Seize" False
    --
    -- Pause by market storage
    --
    -- MintGuardianPaused; 15
    Assert Equal (StorageAtMapping Niutroller 11 (Address cZRX) "bool") False
    From Coburn (Niutroller SetGuardianMarketPaused cZRX "Mint" True)
    Assert Equal (Niutroller MintGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping Niutroller 11 (Address cZRX) "bool") True
    Niutroller SetGuardianMarketPaused cZRX "Mint" False
    -- BorrowGuardianPaused; 16
    Assert Equal (StorageAtMapping Niutroller 12 (Address cZRX) "bool") False
    From Coburn (Niutroller SetGuardianMarketPaused cZRX "Borrow" True)
    Assert Equal (Niutroller BorrowGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping Niutroller 12 (Address cZRX) "bool") True
    Niutroller SetGuardianMarketPaused cZRX "Borrow" False

Macro CheckV3Storage
    -- AllMarkets; 17
    Assert Equal (StorageAt Niutroller 13 0 "number") 2
    -- TODO: StorageAtArray Niutroller 13?
    -- NiuRate; 18
    Assert Equal (StorageAt Niutroller 14 0 "number") 1e18
    -- NiuSpeeds; 19
    Assert Equal (StorageAt Niutroller 15 0 "number") 0
    -- NiuSupplyState; 20
    Assert Equal (StorageAt Niutroller 16 0 "number") 0
    -- NiuBorrowState; 21
    Assert Equal (StorageAt Niutroller 17 0 "number") 0
    -- NiuSupplierIndex; 22
    Assert Equal (StorageAt Niutroller 18 0 "number") 0
    -- NiuBorrowerIndex; 23
    Assert Equal (StorageAt Niutroller 19 0 "number") 0
    -- NiuAccrued; 24
    Assert Equal (StorageAt Niutroller 20 0 "number") 0

-- Times out coverage, disable for now - ideally set flag to not run in coverage
Pending "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    NiutrollerImpl Deploy StandardG1 NiutrollerG1
    Unitroller SetPendingImpl NiutrollerG1
    NiutrollerImpl NiutrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Niutroller SetPendingAdmin Coburn
    ---
    NewNToken ZRX cZRX delegatorType:CErc20Delegator nTokenType:CErc20Delegate
    NewNToken BAT cBAT delegatorType:CErc20Delegator nTokenType:CErc20Delegate
    Give cBAT 10e18 BAT -- Faucet some bat to borrow
    Support cZRX collateralFactor:0.5
    Support cBAT collateralFactor:0.4
    Prep Geoff Some ZRX cZRX
    Mint Geoff 100e18 cZRX
    EnterMarkets Geoff cZRX cBAT
    Borrow Geoff 1e18 cBAT
    --
    CheckUnitrollerStorage (Address NiutrollerG1)
    CheckV1Storage
    --
    NiutrollerImpl Deploy StandardG2 NiutrollerG2
    Unitroller SetPendingImpl NiutrollerG2
    Assert Equal (Unitroller PendingImplementation) (Address NiutrollerG2)
    Assert Equal (StorageAt Niutroller 3 0 "address") (Address NiutrollerG2)
    NiutrollerImpl NiutrollerG2 BecomeG2
    Niutroller SetPauseGuardian Coburn
    --
    CheckUnitrollerStorage (Address NiutrollerG2)
    CheckV1Storage
    CheckV2Storage
    --
    NiutrollerImpl Deploy StandardG3 NiutrollerG3
    Unitroller SetPendingImpl NiutrollerG3
    NiutrollerImpl NiutrollerG3 BecomeG3 1e18 [cZRX cBAT]
    --
    CheckUnitrollerStorage (Address NiutrollerG3)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
    --
    NiutrollerImpl Deploy Standard NiutrollerG4
    Unitroller SetPendingImpl NiutrollerG4
    NiutrollerImpl NiutrollerG4 Become
    --
    CheckUnitrollerStorage (Address NiutrollerG4)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
