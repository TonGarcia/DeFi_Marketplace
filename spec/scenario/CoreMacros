-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedNiutroller closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Simple
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing nEther use ListedEtherToken to replace proxy
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    NiutrollerImpl Deploy Scenario ScenNiutroller
    Unitroller SetPendingImpl ScenNiutroller
    NiutrollerImpl ScenNiutroller Become

Macro NewNiutroller price=1.0 closeFactor=0.1 maxAssets=20
    --g1
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    NiutrollerImpl Deploy ScenarioG1 ScenNiutrollerG1
    Unitroller SetPendingImpl ScenNiutrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing nEther use ListedEtherToken to replace proxy
    NiutrollerImpl ScenNiutrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    --g2
    NiutrollerImpl Deploy StandardG2 NiutrollerG2
    Unitroller SetPendingImpl NiutrollerG2
    NiutrollerImpl NiutrollerG2 BecomeG2
    --g3
    NiutrollerImpl Deploy StandardG3 NiutrollerG3
    Unitroller SetPendingImpl NiutrollerG3
    NiutrollerImpl NiutrollerG3 BecomeG3 1e18 []
    --g4
    NiutrollerImpl Deploy StandardG4 NiutrollerG4
    Unitroller SetPendingImpl NiutrollerG4
    NiutrollerImpl NiutrollerG4 BecomeG4
    --g5
    NiutrollerImpl Deploy ScenarioG5 NiutrollerG5
    Unitroller SetPendingImpl NiutrollerG5
    NiutrollerImpl NiutrollerG5 BecomeG5
    --g6
    NiutrollerImpl Deploy ScenarioG6 NiutrollerG6
    Unitroller SetPendingImpl NiutrollerG6
    NiutrollerImpl NiutrollerG6 BecomeG6
    --current
    NiutrollerImpl Deploy Scenario NiutrollerScen
    Unitroller SetPendingImpl NiutrollerScen
    NiutrollerImpl NiutrollerScen Become

Macro NewNToken erc20 nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=CErc20DelegatorScenario nTokenType=CErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    NTokenDelegate Deploy nTokenType cErc20Delegate
    NToken Deploy delegatorType nToken nToken (Erc20 erc20 Address) (Niutroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (NTokenDelegate cErc20Delegate Address) becomeImplementationData

-- Same as NewNToken but does not deploy an ERC20. Used for special ERC20s that are initialized differently
Macro NewNTokenBringERC20 erc20 nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 delegatorType=CErc20DelegatorScenario nTokenType=CErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    NTokenDelegate Deploy nTokenType cErc20Delegate
    NToken Deploy delegatorType nToken nToken (Erc20 erc20 Address) (Niutroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (NTokenDelegate cErc20Delegate Address) becomeImplementationData

Macro NewNTokenImmutable erc20 nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard nTokenType=Scenario admin=Admin
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    NToken Deploy nTokenType nToken nToken (Erc20 erc20 Address) (Niutroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro NewEtherToken nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    NToken Deploy CEtherScenario nToken nToken (Niutroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro ListedNToken erc20 nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=CErc20DelegatorScenario nTokenType=CErc20DelegateScenario admin=Admin
    NewNToken erc20 nToken borrowRate initialExchangeRate decimals tokenType delegatorType nTokenType admin
    Niutroller SupportMarket nToken

Macro ListedNTokenImmutable erc20 nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard nTokenType=Scenario admin=Admin
    NewNTokenImmutable erc20 nToken borrowRate initialExchangeRate decimals tokenType nTokenType admin
    Niutroller SupportMarket nToken

Macro ListedEtherToken nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken nToken borrowRate initialExchangeRate decimals admin
    Niutroller SupportMarket nToken
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address cETH) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    Niutroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedEtherTokenMinted nToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken nToken borrowRate initialExchangeRate decimals admin
    Niutroller SupportMarket nToken
    CallMintEth Root 1e18 nToken

Macro SetPriceCF nToken price collateralFactor
    PriceOracle SetPrice nToken price
    Niutroller SetCollateralFactor nToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro Donate token amount
    (Trx Value amount (NToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (NToken token Underlying) Approve token UInt256Max)

Macro AccrueInterest token
    NToken token AccrueInterest

Macro Mint user amount token
    From user (NToken token Mint amount)

Macro SendMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (NToken token Mint)))

Macro Redeem user amount token
    From user (NToken token Redeem amount)

Macro RedeemEth user amount token
    Trx GasPrice 0 (From user (NToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (NToken token RedeemUnderlying amount)

Macro RedeemUnderlyingEth user amount token
    Trx GasPrice 0 (From user (NToken token RedeemUnderlying amount))

Macro BorrowEth user amount token
    Trx GasPrice 0 (From user (NToken token Borrow amount))

Macro Borrow user amount token
    From user (NToken token Borrow amount)

Macro RepayBorrow user amount token
    From user (NToken token RepayBorrow amount)

Macro RepayBorrowEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (NToken token RepayBorrow)))

Macro RepayBorrowEthMax user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Maximillion RepayBehalf user)))

Macro RepayBorrowBehalf user behalf amount token
    From user (NToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowEthBehalf user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (NToken token RepayBorrowBehalf behalf)))

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (NToken token Liquidate borrower collateral amount)

Macro LiquidateEthColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (NToken token Liquidate borrower collateral amount))

Macro LiquidateEthBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (NToken token Liquidate borrower collateral)))

Macro Seize amount token caller liquidator borrower
    From caller (NToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    NToken token EvilSeize treasure seizer seizee amount

Macro Support nToken collateralFactor=0.5
    Niutroller SupportMarket nToken
    Niutroller SetCollateralFactor nToken collateralFactor

Macro SetCollateralFactor nToken collateralFactor=0.5
    Niutroller SetCollateralFactor nToken collateralFactor

Macro AddReserves amount token user=Root
    From user (NToken token AddReserves amount)

Macro ReduceReserves amount token
    NToken token ReduceReserves amount

Macro FastForward n blocks
    Niutroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Niutroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Niutroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash nToken
    Read Erc20 (NToken nToken Underlying) TokenBalance nToken

Macro QuickMint amount nToken from=Me
    Give from amount (NToken nToken Underlying)
    Allow from nToken
    From from (NToken nToken Mint amount)

Macro QuickBorrow amount nToken ...collateral
    From Me (Niutroller EnterMarkets collateral)
    From Me (Niutroller EnterMarkets (nToken))
    From Me (NToken nToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 nToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    NToken nToken SetInterestRateModel (InterestRateModel Std Address)
    NToken nToken SetReserveFactor reserveRate
    ListedNToken COLLAT cCOLLAT
    Niutroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT nToken
    Assert True (Niutroller CheckMembership Torrey cCOLLAT)
    Assert True (Niutroller CheckMembership Torrey nToken)
    Borrow Torrey amount nToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (NToken BorrowBalance Torrey) nToken
    From Torrey (Erc20 erc20 Approve nToken amount)
    RepayBorrow Torrey amount nToken
    From Torrey (Erc20 erc20 Approve nToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount nToken
    Assert Equal (NToken nToken BorrowBalance Torrey) Zero

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the ether market
Macro BorrowAndRepayEthWithInterest nEther amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    NToken nEther SetInterestRateModel (InterestRateModel Std Address)
    NToken nEther SetReserveFactor reserveRate
    ListedNToken COLLAT cCOLLAT
    Niutroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT nEther
    Assert True (Niutroller CheckMembership Torrey cCOLLAT)
    Assert True (Niutroller CheckMembership Torrey nEther)
    Borrow Torrey amount nEther
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (NToken BorrowBalance Torrey) nEther
    RepayBorrowEth Torrey amount nEther
    RepayBorrowEth Torrey interestAmount nEther
    Assert Equal (NToken nEther BorrowBalance Torrey) Zero
