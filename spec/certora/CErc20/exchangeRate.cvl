
exchangeRateDecreases(uint result, address minter, uint256 mintAmount, uint256 mintTokens) {
    // Pre/action/post environments
    env e0;
    env e1;
    env e2;

    require e1.block.number >= e0.block.number;
    require e2.block.number >= e1.block.number;

    // Any other account
    address other;
    require other != minter && other != currentContract;
    require minter != currentContract;

    uint256 exchangeRatePre = sinvoke exchangeRateCurrent(e0);

    uint256 nTokenCashPre = sinvoke getCash(e0);
    uint256 nTokenBorrowsPre = sinvoke totalBorrows(e0);
    uint256 nTokenTokensPre = sinvoke totalSupply(e0);
    uint256 nTokenReservesPre = sinvoke totalReserves(e0);
    uint256 nTokenSupplyPre = nTokenCashPre + nTokenBorrowsPre - nTokenReservesPre;

    // Simplifying assumptions to analyze the vulnerability
    require nTokenBorrowsPre == 0; // XXX not necessary, simplifies analysis
    require nTokenSupplyPre >= 0; // XXX not necessary, should underflow
    require nTokenTokensPre > 0; // XXX not necessary
    require exchangeRatePre * nTokenTokensPre == nTokenSupplyPre * 1000000000000000000; // XXX

    // XXX why does this have to be after require?
    uint256 implicitExchangeRatePre = nTokenSupplyPre * 1000000000000000000 / nTokenTokensPre;

    require result == invoke mintFreshPub(e1, minter, mintAmount);
    bool mintFreshReverted = lastReverted;

    uint256 exchangeRatePost = sinvoke exchangeRateCurrent(e2);

    uint256 nTokenCashPost = sinvoke getCash(e2);
    uint256 nTokenBorrowsPost = sinvoke totalBorrows(e2);
    uint256 nTokenTokensPost = sinvoke totalSupply(e2);
    uint256 nTokenReservesPost = sinvoke totalReserves(e2);
    uint256 nTokenSupplyPost = nTokenCashPost + nTokenBorrowsPost - nTokenReservesPost;

    require mintTokens == nTokenTokensPost - nTokenTokensPre;
    require exchangeRatePre * mintTokens == mintAmount * 1000000000000000000;  // XXX why would this need to be assumed? should be proven

    uint256 implicitExchangeRatePost = nTokenSupplyPost * 1000000000000000000 / nTokenTokensPost;

    assert (!mintFreshReverted =>
            ((result != 0) => (exchangeRatePost == exchangeRatePre))), "Mismatch in failure case";
    assert (!mintFreshReverted => (exchangeRatePost >= exchangeRatePre)), "Exchange rate decreased";
    assert (!mintFreshReverted => (implicitExchangeRatePost >= implicitExchangeRatePre)), "Implicit exchange rate decreased";
}
